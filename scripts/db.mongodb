use("DB_CITAS_V1");
db.createCollection("counters");
db.counters.insertMany([
    {_id : "UsuarioId", sequence_value : 0},
    {_id : "MedicoId", sequence_value : 0},
    {_id : "CitaId", sequence_value : 0},
    {_id : "RolesId", sequence_value : 0}
]);

function siguienteId(coleccion) {
    const sequenceDocument = db.counters.findOneAndUpdate(
        { _id: `${coleccion}Id` },
        { $inc: { sequence_value: 1 } },
        { returnDocument: "after" }
    );
    return Number(sequenceDocument.sequence_value);
};


db.createCollection("Usuario", {
    capped: true,
    size: 5000,
    max: 50,
    validator:{
        $jsonSchema:{
            bsonType: "object",
            additionalProperties: false,
            required : ['_id', 'usu_nombre', 'usu_primer_apellido_usuar', 'usu_telefono', 'usu_email', 'usu_tipodoc', 'usu_genero', 'usu_acudiente'],
            properties:{
                _id:{
                    bsonType: 'int',
                    description : "El ID_PACIENTE es un parametro obligatorio y debe ser un entero"
                },
                usu_nombre:{  
                    bsonType: 'string',
                    description : "El PRIMER_NOMBRE_PACIENTE es un parametro obligatorio y debe ser un string"
                },
                usu_segdo_nombre:{  
                    bsonType: 'string',
                    description : "El SEGUNDO_NOMBRE_PACIENTE es un parametro obligatorio y debe ser un string"
                },
                usu_primer_apellido_usuar:{  
                    bsonType: 'string',
                    description : "El PRIMER_APELLIDO_PACIENTE es un parametro obligatorio y debe ser un string"
                },
                usu_segdo_apellido_usuar:{  
                    bsonType: 'string',
                    description : "El SEGUNDO_APELLIDO_PACIENTE es un parametro obligatorio y debe ser un string"
                },
                usu_telefono:{
                    bsonType: 'int',
                    description : "El TELEFONO_PACIENTE es un parametro obligatorio y debe ser un entero"
                },
                usu_direccion:{
                    bsonType: 'string',
                    description : "La DIRECCION_PACIENTE es un parametro obligatorio y debe ser un string"
                },
                usu_email:{
                    bsonType: 'string',
                    description : "El EMAIL_PACIENTE es un parametro obligatorio y debe ser un email valido"
                },
                usu_tipodoc:{
                    bsonType: "object",
                    required : ['tipdoc_nombre'],
                    properties:{
                        tipdoc_nombre:{
                            enum: ["Cédula","Tarjeta de Identidad","Pasaporte","Cédula de Extranjería","Registro Civil"],
                            description : "El NOMBRE_TIPO_DOCUMENTO es un parametro obligatorio y debe ser uno valido"
                        },
                        tipdoc_abreviatura:{  
                            bsonType: 'string',
                            description : "lA ABREVIATURA_TIPO_DOCUMENTO es un parametro obligatorio y debe ser un string"
                        }
                    }
                },
                usu_genero: {
                    enum: [ "Masculino", "Femenino", "No Binario"],
                    description: "El GENERO_PACIENTE debe ser Masculino, Femenino, No Binario"
                },
                usu_acudiente:{
                    bsonType: ["object", "null"],
                    required : ['acu_nombreCompleto', 'acu_telefono'],
                    properties:{
                        acu_nombreCompleto:{
                            bsonType: 'string',
                            description : "El NOMBRE_ACUDIENTE es un parametro obligatorio y debe ser un string"
                        },
                        acu_telefono:{  
                            bsonType: 'int',
                            description : "lA TELEFONO_ACUDIENTE es un parametro obligatorio y debe ser un entero"
                        }, 
                        acu_direccion:{  
                            bsonType: 'string',
                            description : "lA DIRECCION_ACUDIENTE es un parametro obligatorio y debe ser un string"
                        }
                }
            }
        }
        }
    }
})


db.Usuario.insertMany([
        {
          "_id":siguienteId("Usuario"),
          "usu_nombre": "Juan",
          "usu_primer_apellido_usuar": "Gómez",
          "usu_telefono": 123456789,
          "usu_email": "juan@example.com",
          "usu_tipodoc": {
            "tipdoc_nombre": "Cédula",
            "tipdoc_abreviatura": "CC"
          },
          "usu_genero": "Masculino",
          "usu_acudiente":  {
            "acu_nombreCompleto": "Luisa Fernández",
            "acu_telefono": 555555555,
            "acu_direccion": "Calle 123, Ciudad"
          }
        },
        {
          "_id":siguienteId("Usuario"),
          "usu_nombre": "María",
          "usu_primer_apellido_usuar": "Pérez",
          "usu_telefono": 987654321,
          "usu_email": "maria@example.com",
          "usu_tipodoc": {
            "tipdoc_nombre": "Cédula",
            "tipdoc_abreviatura": "CC"
          },
          "usu_genero": "Femenino",
          "usu_acudiente": {
            "acu_nombreCompleto": "Luisa Fernández",
            "acu_telefono": 555555555,
            "acu_direccion": "Calle 123, Ciudad"
          }
        },
        {
            "_id":siguienteId("Usuario"),
            "usu_nombre": "Carlos",
            "usu_primer_apellido_usuar": "Ramírez",
            "usu_telefono": 555111222,
            "usu_email": "carlos@example.com",
            "usu_tipodoc": {
              "tipdoc_nombre": "Pasaporte",
              "tipdoc_abreviatura": "PP"
            },
            "usu_genero": "Masculino",
            "usu_acudiente": {
              "acu_nombreCompleto": "Ana Martínez",
              "acu_telefono": 333333333,
              "acu_direccion": "Avenida 456, Otra Ciudad"
            }
          },
          {
            "_id":siguienteId("Usuario"),
            "usu_nombre": "Laura",
            "usu_primer_apellido_usuar": "García",
            "usu_telefono": 777888999,
            "usu_email": "laura@example.com",
            "usu_tipodoc": {
              "tipdoc_nombre": "Cédula",
              "tipdoc_abreviatura": "CC"
            },
            "usu_genero": "Femenino",
            "usu_acudiente": null
          },
          {
            "_id":siguienteId("Usuario"),
            "usu_nombre": "Andrés",
            "usu_primer_apellido_usuar": "López",
            "usu_telefono": 444555666,
            "usu_email": "andres@example.com",
            "usu_tipodoc": {
              "tipdoc_nombre": "Tarjeta de Identidad",
              "tipdoc_abreviatura": "TI"
            },
            "usu_genero": "Masculino",
            "usu_acudiente": {
              "acu_nombreCompleto": "Javier Pérez",
              "acu_telefono": 111222333,
              "acu_direccion": "Carrera 789, Otra Ciudad"
            }
          }
])

db.createCollection("Medico", {
    capped: true,
    size: 5000,
    max: 50,
    validator:{
        $jsonSchema:{
            bsonType: "object",
            additionalProperties: false,
            required : ['_id', 'med_nroMatriculaProfesional', 'med_nombreCompleto', 'med_consultorio','med_especialidad'],
            properties:{
                _id:{
                    bsonType: 'int',
                    description : "El ID_MEDICO es un parametro obligatorio y debe ser un entero"
                },
                med_nroMatriculaProfesional:{  
                    bsonType: 'int',
                    description : "El NUMERO_MATRICULA_PROFESIONAL es un parametro obligatorio y debe ser un string"
                },
                med_nombreCompleto:{  
                    bsonType: 'string',
                    description : "El NOMBRE_COMPLETO_MEDICO es un parametro obligatorio y debe ser un string"
                },
                med_consultorio:{  
                    enum: ["Consultorio 1","Consultorio 2","Consultorio 3","Consultorio 4","Consultorio 5","Consultorio 6","Consultorio 7","Consultorio 8","Consultorio 9","Consultorio 10"],
                    description : "El CONSULTORIO_MEDICO es un parametro obligatorio y debe ser uno valido"
                },
                med_especialidad:{  
                    bsonType: 'array',
                    description : "El ESPECIALIDAD_MEDICO es un parametro obligatorio y debe ser un array"
                }
        }
        }
    }
})


db.Medico.insertMany([
    {
      "_id": siguienteId("Medico"),
      "med_nroMatriculaProfesional": 12345,
      "med_nombreCompleto": "Dr. Juan Pérez",
      "med_consultorio": "Consultorio 1",
      "med_especialidad": ["Pediatría", "Neonatología"]
    },
    {
      "_id": siguienteId("Medico"),
      "med_nroMatriculaProfesional": 67890,
      "med_nombreCompleto": "Dra. María González",
      "med_consultorio": "Consultorio 2",
      "med_especialidad": ["Ginecología", "Obstetricia"]
    },
    {
      "_id": siguienteId("Medico"),
      "med_nroMatriculaProfesional": 54321,
      "med_nombreCompleto": "Dr. Carlos Ramírez",
      "med_consultorio": "Consultorio 3",
      "med_especialidad": ["Cirugía General"]
    },
    {
      "_id": siguienteId("Medico"),
      "med_nroMatriculaProfesional": 98765,
      "med_nombreCompleto": "Dra. Laura Martínez",
      "med_consultorio": "Consultorio 4",
      "med_especialidad": ["Dermatología"]
    },
    {
      "_id": siguienteId("Medico"),
      "med_nroMatriculaProfesional": 24680,
      "med_nombreCompleto": "Dr. Andrés López",
      "med_consultorio": "Consultorio 5",
      "med_especialidad": ["Cardiología", "Medicina Interna"]
    }
  ])


  db.createCollection("Cita", {
    capped: true,
    size: 5000,
    max: 50,
    validator:{
        $jsonSchema:{
            bsonType: "object",
            additionalProperties: false,
            required : ['_id', 'cit_fecha', 'cit_estadoCita', 'cit_datosUsuario','cit_medico'],
            properties:{
                _id:{
                    bsonType: 'int',
                    description : "El ID_CITA es un parametro obligatorio y debe ser un entero"
                },
                cit_fecha :{  
                    bsonType: 'date',
                    description : "El FECHA_CITA es un parametro obligatorio y debe ser un  tipo fecha"
                },
                cit_estadoCita:{  
                    enum: ["Pendiente","Confirmada","Cancelada","En Progreso","Completada"],
                    description : "El ESTADO_CITA es un parametro obligatorio y debe ser uno valido"
                },
                cit_datosUsuario:{  
                    bsonType: 'int',
                    description : "El DATOS_PACIENTE es un parametro obligatorio y debe ser un INT"
                },
                cit_medico:{  
                    bsonType: 'int',
                    description : "El DATOS_MEDICO es un parametro obligatorio y debe ser un INT"
                }
        }
        }
    }
})


db.Cita.insertMany([ {
    "_id":siguienteId("Cita"),
    "cit_fecha": ISODate("2023-08-20"),
    "cit_estadoCita": "Pendiente",
    "cit_datosUsuario": 1,
    "cit_medico": 1
  },
  {
    "_id":siguienteId("Cita"),
    "cit_fecha": ISODate("2023-08-21"),
    "cit_estadoCita": "Confirmada",
    "cit_datosUsuario": 2,
    "cit_medico": 2
  },
  {
    "_id":siguienteId("Cita"),
    "cit_fecha": ISODate("2023-08-22"),
    "cit_estadoCita": "Cancelada",
    "cit_datosUsuario": 3,
    "cit_medico": 3
  },
  {
    "_id":siguienteId("Cita"),
    "cit_fecha": ISODate("2023-08-23"),
    "cit_estadoCita": "En Progreso",
    "cit_datosUsuario": 4,
    "cit_medico": 4
  },
  {
    "_id":siguienteId("Cita"),
    "cit_fecha": ISODate("2023-08-24"),
    "cit_estadoCita": "Completada",
    "cit_datosUsuario": 5,
    "cit_medico": 5
  },
    {
      "_id":siguienteId("Cita"),
      "cit_fecha": ISODate("2023-08-25"),
      "cit_estadoCita": "Pendiente",
      "cit_datosUsuario": 1,
      "cit_medico": 5
    },
    {
      "_id":siguienteId("Cita"),
      "cit_fecha": ISODate("2023-08-26"),
      "cit_estadoCita": "Confirmada",
      "cit_datosUsuario": 2,
      "cit_medico": 4
    },
    {
      "_id":siguienteId("Cita"),
      "cit_fecha": ISODate("2023-08-27"),
      "cit_estadoCita": "Cancelada",
      "cit_datosUsuario": 3,
      "cit_medico": 3
    },
    {
      "_id":siguienteId("Cita"),
      "cit_fecha": ISODate("2023-08-28"),
      "cit_estadoCita": "En Progreso",
      "cit_datosUsuario": 4,
      "cit_medico": 2
    },
    {
      "_id":siguienteId("Cita") ,
      "cit_fecha": ISODate("2023-08-29"),
      "cit_estadoCita": "Completada",
      "cit_datosUsuario": 5,
      "cit_medico": 1
    },
    {
      "_id":siguienteId("Cita") ,
      "cit_fecha": ISODate("2023-08-30"),
      "cit_estadoCita": "Pendiente",
      "cit_datosUsuario": 1,
      "cit_medico": 2
    },
    {
      "_id":siguienteId("Cita") ,
      "cit_fecha": ISODate("2023-08-31"),
      "cit_estadoCita": "Confirmada",
      "cit_datosUsuario": 2,
      "cit_medico": 2
    },
    {
      "_id":siguienteId("Cita") ,
      "cit_fecha": ISODate("2023-09-05"),
      "cit_estadoCita": "Cancelada",
      "cit_datosUsuario": 3,
      "cit_medico": 5
    },
    {
      "_id":siguienteId("Cita") ,
      "cit_fecha": ISODate("2023-09-02"),
      "cit_estadoCita": "En Progreso",
      "cit_datosUsuario": 4,
      "cit_medico": 1
    },
    {
      "_id":siguienteId("Cita") ,
      "cit_fecha": ISODate("2023-09-03"),
      "cit_estadoCita": "Completada",
      "cit_datosUsuario": 4,
      "cit_medico": 3
    }
  ])

  
db.createCollection("Roles", {
    capped: true,
    size: 5000,
    max: 50,
    validator:{
        $jsonSchema:{
            bsonType: "object",
            additionalProperties: false,
            required : ['_id', 'email_registro', 'password_registro','rol_name','rol_access'],
            properties:{
                _id:{
                    bsonType: 'int',
                    description : "El ID_ROL es un parametro obligatorio y debe ser un entero"
                },
                usuario_nickname:{  
                    bsonType: 'string',
                    description : "El ROL_NICKNAME es un parametro obligatorio y debe ser un string"
                },
                email_registro:{  
                    bsonType: 'string',
                    description : "El ROL_EMAIL es un parametro obligatorio y debe ser un string"
                },
                password_registro:{  
                    bsonType: 'string',
                    description : "El ROL_PASSWORD es un parametro obligatorio y debe ser un string"
                },
                rol_name:{  
                    bsonType: 'string',
                    description : "El NOMBRE_ROL es un parametro obligatorio y debe ser un string"
                },
                rol_access:{  
                    bsonType: 'array',
                    description : "El ACCESO_ROLES es un parametro obligatorio y debe ser un ARRAY"
                }
            }
        }
    }
})

  
  db.Roles.insertMany([
    {
        "_id": siguienteId("Roles"),
        "usuario_nickname": "paciente1",
        "email_registro": "paciente1@example.com",
        "password_registro": "paciente123",
      "rol_name": "Paciente",
      "rol_access": ["Usuario", "Cita"]
    },
    {
      "_id": siguienteId("Roles"),
      "usuario_nickname": "admin1",
      "email_registro": "admin@example.com",
      "password_registro": "admin123",
      "rol_name": "Administrador",
      "rol_access": ["Usuario", "Cita", "Medico"]
    },
    {
      "_id": siguienteId("Roles"),
      "usuario_nickname": "medico1",
      "email_registro": "medico1@example.com",
      "password_registro": "medico123",
      "rol_name": "Médico",
      "rol_access":["Medico", "Cita"]
    }
  ]);
  

//Encontrar la próxima cita para un paciente específico (por ejemplo, el paciente con **usu_id 1**):
use("DB_CITAS_V1")
db.Medico.findOne({"_id":1})
use("DB_CITAS_V1")
db.Cita.aggregate([
  {$match: {"cit_datosUsuario": 87,"cit_fecha" : {$gt: new Date()}}},
  {$lookup: {
    from: "Usuario",
    localField: "cit_datosUsuario",
    foreignField: "_id",
    as: "result"
  }},{
    $unwind: "$result"
  },
  {$lookup: {
    from: "Medico",
    localField: "cit_medico",
    foreignField: "_id",
    as: "Medico"
  }},{
    $unwind: "$Medico"
  },
  {
    $project:{
        _id:0,
        NOMBRE_PACIENTE: "$result.usu_nombre",
        EMAIL_PACIENTE: "$result.usu_email",
        NOMBRE_MEDICO: "$Medico.med_nombreCompleto",
        ESPECIALIDAD_MEDICO: "$Medico.med_especialidad",
        FECHA_CITA: "$cit_fecha",
        ESTADO_CITA: "$cit_estadoCita"
      }
}])


//Obtener todos los médicos de una especialidad específica (por ejemplo, **'Cardiología'**):
use("DB_CITAS_V1")
db.Medico.aggregate([
  {$match: {"med_especialidad":'Neonatolodgía'}},
  {
    $project:{
        _id:0,
        ID_MEDICO: "$_id",
        NUMERO_MATRICULA_PROFESIONAL: "$med_nroMatriculaProfesional",
        NOMBRE_COMPLETO_MEDICO: "$med_nombreCompleto",
        CONSULTORIO_MEDICO: "$med_consultorio",
        ESPECIALIDAD_MEDICO: "$med_especialidad"
      }
}
]).toArray();

//Encontrar todos los pacientes que tienen citas con un médico específico (por ejemplo, el médico con **med_nroMatriculaProsional 1**)
use("DB_CITAS_V1")
db.Cita.aggregate([
  {$match: {"cit_medico":1}},
  {$lookup: {
    from: "Usuario",
    localField: "cit_datosUsuario",
    foreignField: "_id",
    as: "result"
  }},{
    $unwind: "$result"
  },
  {$lookup: {
    from: "Medico",
    localField: "cit_medico",
    foreignField: "_id",
    as: "Medico"
  }},{
    $unwind: "$Medico"
  },
  {
    $project:{
        _id:0,
        NOMBRE_PACIENTE: "$result.usu_nombre",
        EMAIL_PACIENTE: "$result.usu_email",
        NOMBRE_MEDICO: "$Medico.med_nombreCompleto",
        ESPECIALIDAD_MEDICO: "$Medico.med_especialidad",
        FECHA_CITA: "$cit_fecha",
        ESTADO_CITA: "$cit_estadoCita"
      }
}])

//Encontrar todas las citas para un día específico (por ejemplo, **'2023-07-12'**)
use("DB_CITAS_V1")
db.Cita.aggregate([
  {$match: {"cit_fecha":{$eq: (new Date("2023-08-24"))}}},
  {$lookup: {
    from: "Usuario",
    localField: "cit_datosUsuario",
    foreignField: "_id",
    as: "result"
  }},{
    $unwind: "$result"
  },
  {$lookup: {
    from: "Medico",
    localField: "cit_medico",
    foreignField: "_id",
    as: "Medico"
  }},{
    $unwind: "$Medico"
  },
  {
    $project:{
        _id:0,
        NOMBRE_PACIENTE: "$result.usu_nombre",
        EMAIL_PACIENTE: "$result.usu_email",
        NOMBRE_MEDICO: "$Medico.med_nombreCompleto",
        ESPECIALIDAD_MEDICO: "$Medico.med_especialidad",
        FECHA_CITA: "$cit_fecha",
        ESTADO_CITA: "$cit_estadoCita"
      }
}])

use("DB_CITAS_V1")
db.Cita.find({"cit_fecha": {$eq: ISODate("2023-08-24")}})
//{cit_fecha:{$gte:ISODate("2023-08-24”)},{$lt:ISODate(“2021-04-01”)},
db.Cita.find({cit_fecha:{$gte:ISODate('2023-08-24'),$lt:ISODate('2023-08-26')}})

//Obtener los médicos y sus consultorios
use("DB_CITAS_V1")
db.Medico.aggregate([
  {
    $project:{
        _id:0,
        CONSULTORIO_MEDICO: "$med_consultorio",
        NUMERO_MATRICULA_PROFESIONAL: "$med_nroMatriculaProfesional",
        NOMBRE_COMPLETO_MEDICO: "$med_nombreCompleto",
      }
}
]).toArray();

//Contar el número de citas que un médico tiene en un día específico (por ejemplo, el médico con **med_nroMatriculaProsional 1 en '2023-07-12'**)
use("DB_CITAS_V1")
db.Cita.find({"cit_fecha": {$eq: ISODate("2023-08-24")}, "cit_medico": {$eq: 5}})

use("DB_CITAS_V1")
db.Cita.aggregate([
  {$match: {"cit_fecha":{$eq: ISODate("2023-08-24")}, "cit_medico": {$eq: 5}}},
  {$lookup: {
    from: "Medico",
    localField: "cit_medico",
    foreignField: "_id",
    as: "Medico"
  }},{
    $unwind: "$Medico"
  }, { $group: { _id: "$Medico.med_nombreCompleto", Cantidad_de_citas: { $sum: 1 } } }])



  //Obtener los consultorio donde se aplicó las citas de un paciente
  use("DB_CITAS_V1")
db.Cita.aggregate([
  {$match: {"cit_datosUsuario":{$eq: 2}}},
  {$lookup: {
    from: "Usuario",
    localField: "cit_datosUsuario",
    foreignField: "_id",
    as: "result"
  }},{
    $unwind: "$result"
  },
  {$lookup: {
    from: "Medico",
    localField: "cit_medico",
    foreignField: "_id",
    as: "Medico"
  }},{
    $unwind: "$Medico"
  },
  {
    $project:{
        _id:0,
        NOMBRE_PACIENTE: "$result.usu_nombre",
        CONSULTORIO_MEDICO: "$Medico.med_consultorio",
        NOMBRE_MEDICO: "$Medico.med_nombreCompleto",
       
      }
}])


//Obtener todas las citas realizadas por los pacientes de un genero si su estado de la cita fue atendidad
use("DB_CITAS_V1")
db.Cita.aggregate([
  {
    $lookup: {
      from: "Usuario",
      localField: "cit_datosUsuario",
      foreignField: "_id",
      as: "Paciente"
    }
  },{
    $unwind: "$Paciente"
  },
  {$lookup: {
    from: "Medico",
    localField: "cit_medico",
    foreignField: "_id",
    as: "Medico"
  }},{
    $unwind: "$Medico"
  },
  {$match: {"Paciente.usu_genero":{$eq: 'Masculino'}, "cit_estadoCita" :{$eq: 'Completada'} }},
  {
  $project: {
    _id: 0,
    ESTADO_CITA: "$cit_estadoCita",
    NOMBRE_PACIENTE: "$Paciente.usu_nombre",
    NOMBRE_MEDICO: "$Medico.med_nombreCompleto",
    FECHA_CITA: "$cit_fecha"
  }
}])

//Mostrar todas las citas que fueron rechazadas y en un mes específico, mostrar la fecha de la cita, el nombre del usuario y el médico.
use("DB_CITAS_V1")
db.Cita.aggregate([
  {$match: {"cit_fecha" :{$gte: new Date(2023, 7, 1),
      $lt: new Date(2023, 8, 1) 
},"cit_estadoCita" :{$eq: 'Cancelada'}}},
  {
    $lookup: {
      from: "Usuario",
      localField: "cit_datosUsuario",
      foreignField: "_id",
      as: "Paciente"
    }
  },{
    $unwind: "$Paciente"
  },
  {$lookup: {
    from: "Medico",
    localField: "cit_medico",
    foreignField: "_id",
    as: "Medico"
  }},{
    $unwind: "$Medico"
  },
  {
  $project: {
    _id: 0,
    ESTADO_CITA: "$cit_estadoCita",
    NOMBRE_PACIENTE: "$Paciente.usu_nombre",
    NOMBRE_MEDICO: "$Medico.med_nombreCompleto",
    FECHA_CITA: "$cit_fecha"
  }
}])


